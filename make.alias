# Makefile for Building packages for source code living on a parallel branch
# of the same repository.
#
# Â©2011 - Mac Ryan - Released under GPL v3
#
# This file should be in a dedicated branch of the repository together with any
# other file needed for the packaging process, as for example: `setup.py`,
# `setup.cfg`, `copyright`, `icon.xpm`, etc...
#
# Most of the actions will need tweaking depending on your target platform,
# programming language, code organisation, etc... yet the basic idea behind
# the use of `git archive` and `git describe` should be easily reusable.

# What branch is the code we are going to buld the package for
SOURCE_BRANCH = master

# Provides help, also: default make behaviour
help:
	@echo ""
	@echo "Please use \`make <action>\` where <action> is one of"
	@echo ""
	@echo "  clean          to remove all files generated during building"
	@echo "  get-source     to get the source code to be packaged"
	@echo "  remove-source  to remove the source code"
	@echo "  reset          to both eliminate package and source code files"
	@echo "  version        to generate the version number and substitute it"
	@echo "                 in the source files."
	@echo "  deb            to create a built .deb package"
	@echo "  debianize      to create the debian directory needed for creating"
	@echo "                 a package manually at a later stage"
	@echo ""
	@echo "You can also specify a source branch (if different from \`master\`)"
	@echo "by issuing \`make <action> UPSTREAM=<branch-name-here>\`."
	@echo ""

# Remove all files generated by the packaging process, leaves the source files
clean:
	-rm -r -d *.egg-info/ dist/ distribute*.gz distribute*.egg \
	          version-number deb_dist/ debian/
	-find . -name "*.pyc" -type f -exec rm -rf {} \;
	@echo "Files generated during the package build have been removed."

# Fetch the source code from desired branch
get-source:
	git archive $(SOURCE_BRANCH) -o $(SOURCE_BRANCH).tar
	tar xf $(SOURCE_BRANCH).tar
	rm $(SOURCE_BRANCH).tar
	@echo "The source code has been fetched."

# Assign software version number
version:
	./version.py get -d
	./version.py substitute
	@echo "Version number generated and substituted in the source."

# Remove the source code from the current branch
remove-source:
	-rm -rd docs engine entities lib sprites test utils \
	        README.rst .gitignore
	@echo "The source code has been removed."

# Remove both file from package building and the source
reset: clean remove-source
	@echo "The branch has been resetted to its pristine state."

# Build a `built distribution` for debian
deb: clean version
	python setup.py --command-packages=stdeb.command bdist_deb
	@echo ".deb package has been built."

# Creates the `debian` directory needed to proceed with manual packaging
debianize: clean version
	python setup.py --command-packages=stdeb.command debianize
	@echo "Debianize process terminated."
