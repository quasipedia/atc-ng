# Game commands description file
#
# Â©2011 Mac Ryan - Licensed under GPL v.3
#
# This file is intended to work with the ATC-NG game available at
# https://github.com/quasipedia/atc-ng
#
# The "default" field both signals that the arguments are optional and provide
# a default value for them.

HELP:
  spellings: [HELP, MAN]
  arguments: 1
  default: HELP
  flags: []
  validator: _validate_help
  description: >
    Lend a hand to players who lost their faith in ATC-NG.

      The command ``/HELP`` provides help on game and aeroplane commands (the
      name of the command must be passed as an argument). If issued without
      arguments, ``/HELP`` displays help on the ``/HELP`` command (this
      message).
  examples: |

    >>> /HELP LAND
    >>> /MAN MAN

LIST:
  spellings: [LIST, LS]
  arguments: 1
  default: ''
  flags:
    DESCRIPTION: [DESCRIPTION, D]
  validator: _validate_list
  description: >
    List the available scenarios on the system.

      Without arguments, the command will list all the available scenarios, but
      it is possible to filter them using a :term:`glob<globbing>` as parameter.
      ATC-NG uses an extremely simplified form of globbing, for which the
      parameter will be surrounded by asterisks (see example below).

      Normally, pattern matching is performed on file names, but if the
      ``DESCRIPTION`` flag is used, the matching will be performed on the
      description of the scenario.

      +--------------------+--------------------------------------------------+
      | ISSUED COMMAND     | LISTED SCENARIOS                                 |
      +====================+==================================================+
      | /LIST              | All currently available (all installed)          |
      +--------------------+--------------------------------------------------+
      | /LIST SKY-OVER-    | All whose filename match the *SKY-OVER-* glob.   |
      +--------------------+--------------------------------------------------+
      | /LS FUNNY D        | All that contain the word "funny" in their       |
      |                    | description.                                     |
      +--------------------+--------------------------------------------------+

      Patter matching is **case insensitive**.
  examples: |

    >>> /LIST SKY-OVER-
    >>> /LS FUNNY D

LOAD:
  spellings: [LOAD, LO, RUN, PLAY]
  arguments: 1
  default: null
  flags: []
  validator: _validate_load
  description: >
    Load a scenario (start a new game on that scenario).

      The parameter must be the name of a scenario currently installed on the
      system. Use the ``/LIST`` command for a list of installed scenarios.

      If the parameter is omitted, the game will load a random scenario.
  examples: |

    >>> /LOAD SKY-OVER-STOCKHOLM
    >>> /PLAY

PAUSE:
  spellings: [PAUSE, P]
  arguments: 0
  flags: []
  validator: null
  description: >
    Toggle between the game running normally e the game being paused. On some
    systems it's possible to achieve the same result by pressing the
    :kbd:`pause` key, if present.

      While the game is paused, the radar screen is obfuscated.
  examples: |

    >>> /PAUSE
    >>> /P

QUIT:
  spellings: [QUIT, EXIT]
  arguments: 0
  flags: []
  validator: null
  description: >
    Quit the program immediately (no further question asked).
  examples: |

    >>> /QUIT
    >>> /EXIT

SCORES:
  spellings: [SCORES, SC, BOARD]
  arguments: 1
  default: null
  flags: []
  validator: _validate_scores
  description: >
    Show ATC-NG scores.

      Issued without arguments, the command displays the top scores on the
      system (regardless of which user and what scenario).

      If an argument is passed, this must be a string that will be used for
      pattern-matching against both scenarios and users (only scores achieved
      by a user with a matched username or on a scenario with a matched name
      will be shown.)
  examples: |

    >>> /SCORES
    >>> /BOARD STOCKHOLM

SORT:
  spellings: [SORT, SO]
  arguments: 1
  default: TIME
  flags: []
  validator: _validate_sort
  description: >
    Sort the :term:`flight progress strips`.

       The flight progress strips can be sorted according to various criteria.
       The general idea is that *the strip at the bottom of the stack should
       always be the one requiring your attention first*.

       The command accepts a parameter indicating what criteria to use. Valid
       criterias are:

       * ALTITUDE (lowest aeroplanes first)
       * FUEL (closest to be in an emergency first)
       * STATUS (statuses that require immediate action first)
       * TIME (priority to last order issued a long time ago)
       * SPEED (slowest aeroplanes first)
  examples: |

    >>> /SORT TIME
    >>> /SO FUEL
